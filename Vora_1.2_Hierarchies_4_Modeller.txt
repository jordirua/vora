#####################################
# VORA HIERARCHIES USING VORA TOOLS #
#####################################

sudo -iu vora 

rm addresses.csv
rm hierarchy.csv

hdfs dfs -rm /user/vora/hierarchy.csv
hdfs dfs -rm /user/vora/addresses.csv

## id, name, pred, succ, ord
echo "1,Diane,0,1,1" >> hierarchy.csv
echo "2,Austin,1,2,1" >> hierarchy.csv
echo "3,Joe,1,3,2" >> hierarchy.csv
echo "4,Denys,3,4,1" >> hierarchy.csv
echo "5,Jamie,3,5,2" >> hierarchy.csv
echo "6,Julie,3,6,3" >> hierarchy.csv
echo "7,Bob,3,7,4" >> hierarchy.csv
echo "8,Phil,3,8,5" >> hierarchy.csv

echo "1,Philly" >> addresses.csv
echo "2,Palo Alto" >> addresses.csv
echo "3,San Francisco" >> addresses.csv
echo "4,Den Bosch" >> addresses.csv
echo "5,Vancouver" >> addresses.csv
echo "6,Seattle" >> addresses.csv
echo "7,New York" >> addresses.csv
echo "8,Paris" >> addresses.csv

hdfs dfs -ls /user/vora/
hdfs dfs -put hierarchy.csv
hdfs dfs -put addresses.csv
hdfs dfs -ls /user/vora/
hdfs dfs -cat /user/vora/hierarchy.csv
hdfs dfs -cat /user/vora/addresses.csv

drop table hierarchy_table;
create table hierarchy_table
(id integer, name varchar(200), pred integer, succ integer, ord integer) 
using com.sap.spark.vora 
options 
(
tablename "hierarchy_table",
paths "/user/vora/hierarchy.csv"
);

select * from hierarchy_table;

drop table addresses;
create temporary table addresses
(id integer, address varchar(200)) 
using com.sap.spark.vora 
options 
(
tablename "addresses",
paths "/user/vora/addresses.csv"
);

select * from addresses;

drop view hv
using com.sap.spark.vora;

create view hv as select * from hierarchy 
(using hierarchy_table as v join parent u 
on v.pred = u.succ start where pred = 0 set node) 
as h

show tables;

select * from hierarchy_table;

// minimal hierarchy query
select name, is_root(node) from hv;

select name, is_root(node) from hv where is_root(node) = true;

// hierarchy self-join to get children
select a.name, b.name from hv a, hv b where is_child(a.node, b.node);

// hierarchy self-join to get parent
select a.name, b.name from hv a, hv b where is_parent(a.node, b.node);

// hierarchy self-join to get sibling
select a.name, b.name from hv a, hv b where is_sibling(a.node, b.node);

// hierarchy self-join to get descendant
select a.name, b.name from hv a, hv b where is_descendant(a.node, b.node);

// hierarchy self-join to get ancestor
select a.name, b.name from hv a, hv b where is_ancestor(a.node, b.node);

// hierarchy self-join to get following
select a.name, b.name from hv a, hv b where is_following(a.node, b.node);

// hierarchy self-join to get preceding
select a.name, b.name from hv a, hv b where is_preceding(a.node, b.node);

select * from addresses;

// simple join of hierarchy view with another table
select a.name, b.address from hv a, addresses b where a.id = b.id;

// get ids of the children of the root.
select hv2.id as child from hv hv1, hv hv2 where is_child(hv2.node, hv1.node) and is_root(hv1.node);

// get addresses of the children of the root.
select b.address from (select hv2.id as child from hv hv1, hv hv2 
where is_child(hv2.node, hv1.node) and is_root(hv1.node)) a, addresses b 
where a.child = b.id;

// get names and addresses of 2nd level employees
select a.name, b.address from hv a, addresses b where a.id = b.id and level(a.node) = 2;

// get names and addresses of 3rd level employees
select a.name, b.address from hv a, addresses b where a.id = b.id and level(a.node) = 3;
